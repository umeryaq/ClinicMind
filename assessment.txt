Question - 1

The following snippet is appending the text in non-blocking fashion into dom via JQuery in each iteration. 
The .find() could be expensive for nested dom elements since it returns all the descendants of the targetted element too.
In console tab, we will get to see
so far so good
I like to eat apples
I like to eat apples  bananas 
I like to eat apples  bananas  cookies 


Question - 2
Domcontentloaded will be fired as soon as the DOM is loaded and it wont wait for resources to finish loading.


Question - 3
the order will be as follows
toyota
honda
vw
bmw
mercedes

Question - 4
A deadlock is a situation in which two computer programs sharing the same resource are effectively preventing each other from accessing the resource, resulting in both programs ceasing to function.

Causes:
Deadlock occurs when a set of processes are in a wait state, because each process is waiting for a resource that is held by some other waiting process. Therefore, all deadlocks involve conflicting resource needs by two or more processes.

Effects:
When a deadlock occurs, it can cause your computer to freeze up, making it difficult to even restart. This can cause you to lose important work or data and in some cases, may even damage your computer. To prevent a deadlock state, it's important to be aware of what causes deadlocks and how to avoid them


Question - 5
const distinctArray = [...new Set([2,5,6,8,0,10,10])];

const add = (array, targetSum) => {
    const numbers = [];
    for (let i = 0; i < array.length && !numbers.length; i++) {
        const firstNumber = array[i];
        for (let j = i + 1; j < array.length; j++) {
            const secondNumber = array[j];
            const sum = firstNumber + secondNumber;
            if (sum === targetSum) {
                numbers.push(firstNumber, secondNumber);
                break
            }
        }
    }
    return numbers;
}


console.log(add(distinctArray, 10)) // [2,8]


TIME COMPLEXITY => 

TIME-COMPLEXITY OF THE CODE IS O(n ^ 2) since we are using nested loop here.